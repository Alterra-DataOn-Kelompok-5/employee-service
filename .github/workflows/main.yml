name: Push-to-EC2

# Trigger deployment only on push to master branch
on:
  push:
    branches:
      - main

jobs:
  build-docker:
    name: "Build Docker Container"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: setup GO
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.17.0'
      
      - name: create env file
        env:
          APP_PORT: ${{ secrets.APP_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          touch .env
          echo APP_PORT=$APP_PORT >> .env
          echo DB_USER=$DB_USER >> .env
          echo DB_PASS=$DB_PASS >> .env
          echo DB_HOST=$DB_HOST >> .env
          echo DB_PORT=$DB_PORT >> .env
          echo DB_NAME=$DB_NAME >> .env
          echo JWT_SECRET=$JWT_SECRET >> .env
      
      - name: login to docker hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} 
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      
      - name: build docker container
        run: |
          make build-image
      
      - name: push docker container
        run: |
          make push-image
        
  deploy:
    name: Deploy to EC2 on main branch push
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Checkout the files
        uses: actions/checkout@v2

      - name: Deploy to Server EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_EMPLOYEE_SSH_KEY }}
          REMOTE_HOST: ${{ secrets.HOST_DNS_EMPLOYEE }}
          REMOTE_USER: ${{ secrets.USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key && chmod 400 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${REMOTE_USER}@${REMOTE_HOST} '
          
            #Now we have got the access of EC2 and we will start the deploy .
              docker pull azkafr92/meeting-room-management-employee-service:latest &&
              docker container stop employee-service || true &&
              docker container rm employee-service || true &&
              docker container create --name employee-service -p 8080:8080 azkafr92/meeting-room-management-employee-service:latest &&
              docker container start employee-service
          '
